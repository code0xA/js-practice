---

## ðŸ’¡ What is `reduce()`?

`reduce()` **reduces** an array to a **single value** â€” by executing a **callback function** on each element of the array **sequentially**, and **accumulating** the result.

---

## âœ… Syntax:

```js
array.reduce((accumulator, currentValue) => {
    return something;
}, initialValue);
```

| Parameter      | Meaning                                                                    |
| -------------- | -------------------------------------------------------------------------- |
| `accumulator`  | Stores the result of the previous computation (starts from `initialValue`) |
| `currentValue` | The current item in the array being processed                              |
| `initialValue` | The value the accumulator starts with (usually 0 or \[])                   |


## ðŸ§  Use Cases of `reduce()`:

| Goal                    | Example                                                                  |
| ----------------------- | ------------------------------------------------------------------------ |
| Sum all values          | `[1,2,3].reduce((acc, val) => acc + val, 0)`                             |
| Multiply values         | `[1,2,3].reduce((acc, val) => acc * val, 1)`                             |
| Flatten an array        | `[[1], [2], [3]].reduce((acc, val) => acc.concat(val), [])`              |
| Count items by category | `["apple", "banana", "apple"].reduce(...)`                               |
| Build an object or map  | `arr.reduce((acc, val) => { acc[val.key] = val.value; return acc }, {})` |

---
